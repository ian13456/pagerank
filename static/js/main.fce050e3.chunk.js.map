{"version":3,"sources":["components/Node.js","containers/App.js","serviceWorker.js","index.js"],"names":["id","connections","value","position","hover","setHover","defaultPosition","className","onMouseEnter","onMouseLeave","style","boxShadow","includes","length","sort","a","b","map","n","i","key","color","getMidRandom","Math","random","defaultNodes","defaultLocations","x","window","innerWidth","y","innerHeight","defaultConnections","columns","title","dataIndex","App","useState","setConnections","nodes","setNodes","locations","setLocations","start","setStart","end","setEnd","graph","reset","visited","Set","forEach","link","add","filter","has","l","ranks","rank","node","toFixed","findConnections","data","r","score","console","log","dataSource","pagination","hideOnSinglePage","defaultPageSize","addonBefore","onChange","e","parseInt","target","onClick","Number","isInteger","notification","open","message","placement","duration","closeIcon","background","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fce050e3.chunk.js","sourcesContent":["import React from 'react'\nimport Draggable from 'react-draggable'\nimport './Node.scss'\n\nexport default ({ id, connections, value, position, hover, setHover }) => {\n  return (\n    <Draggable defaultPosition={position}>\n      <div\n        className=\"node-wrapper\"\n        onMouseEnter={() => {\n          setHover(id)\n        }}\n        onMouseLeave={() => {\n          setHover(null)\n        }}\n        style={{\n          boxShadow: connections.includes(hover) ? \"0px 0px 3px 3px yellow\" : ''\n        }}\n      >\n        <div className=\"node-id\">\n          Page <span>{id}</span>\n        </div>\n        <div className=\"node-connections\">\n          {connections.length\n            ? connections\n              .sort((a, b) => a - b)\n              .map((n, i) => (\n                <p key={i}>\n                  Link to{' '}\n                  <span style={{ color: hover === n ? 'red' : 'green' }}>\n                    {n}\n                  </span>\n                </p>\n              ))\n            : 'none'}\n        </div>\n        <div className=\"node-value\">{value}</div>\n      </div>\n    </Draggable>\n  )\n}\n","import React, { useState } from 'react'\nimport Node from '../components/Node'\nimport './App.scss'\nimport graph from 'pagerank.js'\nimport { notification, Input, Button, Table } from 'fiber-ui'\n\nconst getMidRandom = (n) => ((Math.random() - 0.5) * n + 50) / 100\n\nconst defaultNodes = [0, 1, 2, 3, 4, 5]\nconst defaultLocations = [\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n  {\n    x: getMidRandom(70) * window.innerWidth,\n    y: getMidRandom(40) * window.innerHeight\n  },\n]\nconst defaultConnections = [\n  [0, 1],\n  [1, 2],\n  [1, 3],\n  [1, 3],\n  [1, 4],\n  [1, 5],\n  [2, 0],\n  [2, 4],\n  [3, 0],\n  [3, 5],\n  [5, 2]\n]\n\nconst columns = [\n  { title: 'ID (#)', dataIndex: 'id', key: 'id' },\n  { title: 'Score', dataIndex: 'score', key: 'score' }\n]\n\nfunction App() {\n  const [connections, setConnections] = useState(defaultConnections)\n  const [nodes, setNodes] = useState(defaultNodes)\n  const [locations, setLocations] = useState(defaultLocations)\n\n  const [hover, setHover] = useState(null)\n  const [start, setStart] = useState(1)\n  const [end, setEnd] = useState(3)\n\n  graph.reset()\n\n  const visited = new Set()\n  connections.forEach(([a, b]) => {\n    graph.link(a, b)\n\n    visited.add(a)\n    visited.add(b)\n  })\n\n  const leftover = nodes.filter(n => !visited.has(n))\n  leftover.forEach(l => graph.link(l, l))\n\n  const ranks = []\n  graph.rank(0.81, 0.000001, (node, rank) => {\n    ranks[node] = rank.toFixed(3)\n  })\n\n  const onFormSubmit = () => {\n    if (!Number.isInteger(start) || !Number.isInteger(end)) {\n      notification.open({\n        message: 'Invalid page numbers!',\n        placement: 'topLeft',\n        duration: 1,\n        closeIcon: false,\n        style: {\n          background: '#ff4444'\n        }\n      })\n    } else if (\n      start === end ||\n      start > nodes.length ||\n      start < 0 ||\n      end > nodes.length ||\n      end < 0\n    )\n      notification.open({\n        message: \"Pages don't work!\",\n        placement: 'topLeft',\n        duration: 1,\n        closeIcon: false,\n        style: {\n          background: '#ff4444'\n        }\n      })\n    else {\n      notification.open({\n        message: `Linking page ${start} to page ${end}...`,\n        placement: 'topLeft',\n        duration: 2,\n        closeIcon: false,\n        style: {\n          background: '#03c4a1'\n        }\n      })\n      setConnections(() => [...connections, [start, end]])\n    }\n  }\n\n  const onAddNewNode = () => {\n    setNodes(() => [...nodes, nodes.length])\n    setLocations(() => [\n      ...locations,\n      {\n        x: getMidRandom(70) * window.innerWidth,\n        y: getMidRandom(40) * window.innerHeight\n      }\n    ])\n  }\n\n  const findConnections = (n) => {\n    return connections.filter(([a]) => a === n).map(([_, b]) => b)\n  }\n\n  const data = ranks\n    .map((r, i) => ({ id: i, score: r }))\n    .sort((a, b) => b.score - a.score)\n\n  console.log(data)\n\n  return (\n    <div className=\"app-wrapper\">\n      <div className=\"page-ranks\">\n        <Table\n          columns={columns}\n          dataSource={data}\n          pagination={{ hideOnSinglePage: true, defaultPageSize: 10000000 }}\n        />\n      </div>\n      <div className=\"visual-main\">\n        {nodes.map((n, i) => (\n          <Node\n            key={i}\n            id={n}\n            connections={findConnections(n)}\n            value={ranks[i]}\n            position={locations[i]}\n            hover={hover}\n            setHover={setHover}\n          />\n        ))}\n      </div>\n      <div className=\"connection-form\">\n        Link{' '}\n        <Input\n          addonBefore=\"Page\"\n          value={start}\n          onChange={(e) => setStart(parseInt(e.target.value, 10) || 0)}\n        />{' '}\n        to{' '}\n        <Input\n          addonBefore=\"Page\"\n          value={end}\n          onChange={(e) => setEnd(parseInt(e.target.value, 10) || 0)}\n        />{' '}\n        <Button onClick={onFormSubmit}>Go!</Button>\n      </div>\n      <div className=\"add-form\">\n        <Button onClick={onAddNewNode}>Add New Node</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport { UIProvider } from 'fiber-ui'\n\nReactDOM.render(\n  <UIProvider>\n    <App />\n  </UIProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}